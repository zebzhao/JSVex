#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs');
var path = require('path');
var util = require('util');
var _ = require('lodash');

var config = JSON.parse(fs.readFileSync(path.join(__dirname, 'jsvex.json')));
var libs = Object.keys(config);
var files = [];
var cmdPattern = "node node_modules/tern/bin/condense --name %s --plugin doc_comment --no-spans %s > %s\n";
var shell = "";

libs.map(function(name) {
    var versions = Object.keys(config[name]);
    versions.map(function(version) {
        var data = {
            label: name,
            version: version,
            values: config[name][version].cdn,
            file: config[name][version].local.length ? 'def~' + name + '~' + version : undefined
        };
        files.push(data);
        if (config[name][version].local.length)
            shell += util.format(cmdPattern, data.label,
                config[name][version].local[0], 'output/' + data.file + '.json');
    });
});

var index = [];
var grouped = _.groupBy(files, 'label');
libs.sort(function (a, b) {
    return a.toLowerCase().localeCompare(b.toLowerCase());
});
libs.map(function(name) {
    index.push({
        label: name,
        versions: _.map(grouped[name], 'version').sort(),
        data: _.transform(_.groupBy(grouped[name], 'version'), function(result, value, key) {
            result[key] = {values: value[0].values, file: value[0].file}
        }, {})
    });
});

fs.writeFile(path.join(__dirname, "/output/index.json"), JSON.stringify(index, "", " "));
fs.writeFile(path.join(__dirname, "/make.sh"), shell);
